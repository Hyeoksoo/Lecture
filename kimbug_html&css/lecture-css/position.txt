<Position>
=>Position은 요소를 원하는 위치에 자유롭게 이동시키기 위해서 이용하는 property

<position 종류>
Static
relative
absolute
fixed 
sticky => 지원하는 브라우저가 많지 않기 때문에 SKIP

<position을 공부할 때 고려할 2가지>
1. 내가 어떤 종류의 position을 사용하고 있는지
2. 내가 사용하는 position은 무엇을 기준으로 위치시키는지

position은 요소를 이동시키기 위해 사용하는 속성이지만 '기준점'이 존재
기준점이 각각의 'Position Type'에 따라서 굉장히 많이 달라짐
------------------------------------------------------------------------
<Position:static> => 모든 요소의 기본 position 값 (우리가 생각하는 가장 일반적인 값)
------------------------------------------------------------------------
<Position:relative> => (이동 기준 : 자기 자신이 원래 있던 자리)
------------------------------------------------------------------------
<Position:absolute> (display: float랑 비슷함)
display가 block으로 바뀜(display:block), block은 block인데 '길막을 못하는' block, 
 float처럼 부모가 자식요소를 인식못하게 되어버림(부모box의 height가 position: absolute 속성을 준 자식 요소의 height만큼 감소)
(자기 혼자 붕떠서 다른 요소의 간섭도 받지 않고 화면에 떠 있음)

absolute의 기준점 => 자신이 기준으로 삼고 싶은 기준점을 새로 설정가능.
(float는 자신을 감싸고 있는 부모에 철저히 종속당했었음)
absolute는 자신을 감싸고 있는 여러 조상 중에서 자기가 기준으로 삼고 싶은 요소를 선택할 수 있음
선택의 기준 -> position이 static이 아닌 요소일 경우 그 요소를 기준으로 해서 자기자신을 위치 시키는 것,
             그래서 주변 요소에 아무런 영향을 끼치지 않는 relative를 사용을 해서 absolute의 기준점을 잡아주는게 현명함
------------------------------------------------------------------------
<Position: fixed> => absolute를 사용했을 때와 동일한 현상이 일어남 
										 (fixed 된 요소가 block box가 된다든가 붕떠서 길막이 안된다거나 집나간 자식이 된다는둥)
★★★★★그러나 fixed와 absolute와의 명확한 차이점 = fixed는 viewport size를 기준으로 자신을 위치시키게 됨
(viewport = browser 창의 전체크기)

------------------------------------------------------------------------
position 속성을 선언했으면 어디에 옮길지 위치를 알려줘야함!
이 떄 사용하는 css property가 top, bottom, left, right (top bottom 중에 하나 left right 중에 하나)

------------------------------------------------------------------------
Z-index

position된 요소들을 수직방향으로서의 level을 알려줌
Z-index가 클수록 위에 있는 것

